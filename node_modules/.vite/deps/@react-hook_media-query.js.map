{
  "version": 3,
  "sources": ["../../@react-hook/media-query/dist/module/index.js"],
  "sourcesContent": ["import * as React from 'react';\n\nfunction queriesDidChange(prevQueries, nextQueries) {\n  if (nextQueries === prevQueries) return false;\n  const nextQueriesArr = Object.values(nextQueries);\n  const prevQueriesArr = Object.values(prevQueries);\n  if (nextQueriesArr.length !== prevQueriesArr.length) return true;\n  if (nextQueriesArr.some((q, i) => q !== prevQueriesArr[i])) return true;\n  const prevKeys = Object.keys(prevQueries);\n  return Object.keys(nextQueries).some((n, i) => n !== prevKeys[i]);\n}\n\nfunction _ref(curr, key) {\n  curr.matches[key] = false;\n  curr.mediaQueries[key] = {};\n  return curr;\n}\n\nfunction init(queries) {\n  const queryKeys = Object.keys(queries);\n  /* istanbul ignore next */\n\n  if (typeof window === 'undefined') return queryKeys.reduce(_ref, {\n    mediaQueries: {},\n    matches: {}\n  });\n  return queryKeys.reduce((state, name) => {\n    const mql = window.matchMedia(queries[name]);\n    state.mediaQueries[name] = mql;\n    state.matches[name] = mql.matches;\n    return state;\n  }, {\n    mediaQueries: {},\n    matches: {}\n  });\n}\n\nfunction reducer(state, action) {\n  function _ref2(prev, key) {\n    prev[key] = state.mediaQueries[key].matches;\n    return prev;\n  }\n\n  switch (action.type) {\n    case 'updateMatches':\n      return {\n        matches: Object.keys(state.mediaQueries).reduce(_ref2, {}),\n        mediaQueries: state.mediaQueries\n      };\n\n    case 'setQueries':\n      return init(action.queries);\n  }\n}\n/**\n * A hook that returns a [`MediaQueryMatches`](#mediaquerymatches) object which will\n * tell you if specific media queries matched, all media queries matched, or\n * any media queries matched. Matches in this hook will always return `false` when\n * rendering on the server.\n *\n * @param queryMap The media queries you want to match against e.g. `{screen: \"screen\", width: \"(min-width: 12em)\"}`\n */\n\n\nexport function useMediaQueries(queryMap) {\n  const prevQueries = React.useRef(queryMap);\n  const [state, dispatch] = React.useReducer(reducer, queryMap, init);\n  React.useEffect(() => {\n    if (queriesDidChange(queryMap, prevQueries.current)) {\n      dispatch({\n        type: 'setQueries',\n        queries: queryMap\n      });\n      prevQueries.current = queryMap;\n    }\n  }, [queryMap]);\n\n  function _ref3() {\n    return dispatch({\n      type: 'updateMatches'\n    });\n  }\n\n  function _ref4(mq) {\n    const callback = _ref3;\n    if (typeof mq.addListener !== 'undefined') mq.addListener(callback);else mq.addEventListener('change', callback);\n    return callback;\n  }\n\n  React.useEffect(() => {\n    const queries = Object.values(state.mediaQueries);\n    const callbacks = queries.map(_ref4);\n\n    function _ref5(mq, i) {\n      if (typeof mq.addListener !== 'undefined') mq.removeListener(callbacks[i]);else mq.removeEventListener('change', callbacks[i]);\n    }\n\n    return () => {\n      queries.forEach(_ref5);\n    };\n  }, [state.mediaQueries]);\n  const {\n    matches\n  } = state;\n  const matchValues = React.useMemo(() => Object.values(matches), [matches]);\n  return {\n    matches,\n    matchesAny: matchValues.some(Boolean),\n    matchesAll: matchValues.length > 0 && matchValues.every(Boolean)\n  };\n}\n/**\n * A hook that returns `true` if the media query matched and `false` if not. This\n * hook will always return `false` when rendering on the server.\n *\n * @param query The media query you want to match against e.g. `\"only screen and (min-width: 12em)\"`\n */\n\nexport function useMediaQuery(query) {\n  return useMediaQueries(getObj(query)).matchesAll;\n}\nconst cache = {};\n\nfunction getObj(query) {\n  if (cache[query] === void 0) cache[query] = {\n    default: query\n  };\n  return cache[query];\n}"],
  "mappings": "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",
  "names": []
}
